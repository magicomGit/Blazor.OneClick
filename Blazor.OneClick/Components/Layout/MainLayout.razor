@using Blazor.OneClick.Components.Pages.Shared.Modals
@using Blazor.OneClick.Constants
@using Blazor.OneClick.Helpers
@using Blazor.OneClick.Models
@using Blazor.OneClick.Static
@using Microsoft.AspNetCore.Localization
@using Microsoft.Extensions.Caching.Memory
@using Microsoft.Extensions.Localization
@using MudBlazor
@using System.Globalization
@using global::OneClick.Data.Data
@using global::OneClick.Data.Helpers
@using global::OneClick.Domain.Enums.Customer
@using global::OneClick.Domain.Enums.Transaction
@using global::OneClick.UseCases.Intefaces.App
@using global::OneClick.UseCases.Intefaces.Balances
@using global::OneClick.UseCases.Intefaces.OneClickProjects
@using global::OneClick.UseCases.Intefaces.User
@inherits LayoutComponentBase
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IUserRepository _userRepository
@inject IMemoryCache _cache
@inject NavigationManager _navigationManager
@inject ApplicationDbContext _context
@inject IAppLogger _logger
@inject IPayments _payments
@inject IOneClickProjectRepositoty _projectRepositoty
@inject IDialogService _dialogService
@inject IStringLocalizer<MainLayout> localize

<style>
    .mud-main-content {
        padding-top: 0 !important;
    }
</style>

<MudThemeProvider Theme="@CustomTheme.MyTheme" IsDarkMode="_dark" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<AuthorizeView>
    <Authorized>

        <MudLayout>
            <MudAppBar Fixed="false" Elevation="0" >

                <div class="">
                    <MudStack Row>
                        <MudImage Width="40" Src="img/logo-200.png"></MudImage>
                        <MudText Typo="Typo.h5" Class="ml-3 d-none d-md-block">CopyTrader</MudText>
                    </MudStack>
                </div>

                <MudSpacer />


                <div class="d-none d-md-block">
                    <MudStack Spacing="1" Class="" Row AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Outlined.AccountBalanceWallet" Color="Color.Inherit" />
                        <MudLink Href="/appuser?i=1" Underline="Underline.None">
                            <MudText Typo="Typo.subtitle1" Style="color: white; font-weight:600">@_userData?.Balance.ToString("N2") $</MudText>
                        </MudLink>

                        @if (_userData?.FreezeDay != null)
                        {
                            <MudChip T="string" Class="fw-bold" Color="_freezeDayColor">@localize["until"] @_userData?.FreezeDay?.ToString("d")</MudChip>
                        }
                    </MudStack>
                </div>

                <MudSpacer />


                <div class="d-none d-md-block">
                    <MudStack Spacing="1" Class="" Row AlignItems="AlignItems.Center">
                        <MudLink Class="text-decoration-none fw-bold" Color="Color.Info" Href="@("appuser")">
                            <MudAvatar>
                                <MudImage Src="@_userData?.Avatar"></MudImage>
                            </MudAvatar>
                        </MudLink>
                        <MudIconButton Icon="@_darkModeIcon" Color="Color.Inherit" Edge="Edge.End" OnClick="@((e)=>ThemeToggle())" />
                        <MudIconButton Icon="@Icons.Material.Filled.Language" Color="Color.Inherit" OnClick="LanguageToggle" />
                    </MudStack>
                </div>


                <MudIconButton Icon="@Icons.Material.Filled.Menu" Class="d-md-none" Color="Color.Inherit" Edge="Edge.End" OnClick="@((e) => MenuToggle())" />

            </MudAppBar>


            <MudPaper Elevation="1" Class="d-none d-md-block px-4 py-2" Style="@(_dark ? "background:1a1c2d": "background:#fff")">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Class="pa-1" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" />
            </MudPaper>

            @* mobile *@
            <MudDrawer @bind-Open="@_open" OverlayAutoClose="true" Class="d-md-none" Height="100%" Color="Color.Tertiary" Variant="@DrawerVariant.Temporary" Anchor="Anchor.Top">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="px-4">
                    <MudImage Width="30" Height="30" Src="img/logo-200.png"></MudImage>
                    <MudIconButton Icon="@Icons.Material.Filled.Close"  Edge="Edge.End" OnClick="@((e) => MenuToggle())" />
                </MudStack>

                <MudStack Justify="Justify.Center" Spacing="0" AlignItems="AlignItems.Center">
                    <MudLink Class="text-decoration-none fw-bold" Color="Color.Info" Href="@("appuser")">
                        <MudAvatar Size="Size.Large">
                            <MudImage Src="@_userData?.Avatar"></MudImage>
                        </MudAvatar>
                    </MudLink>
                    <MudText Class="mobile-text">@_userData?.UserName</MudText>
                    
                </MudStack>


                <MudDivider Style="flex-grow: initial;" Class=" my-2" />



                <MudStack Row AlignItems="AlignItems.Center">
                    <MudNavLink Href="/appuser?i=1" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.AccountBalanceWallet" IconColor="Color.Surface">
                        <MudStack Row>
                            <MudText  Color="Color.Surface">@_userData?.Balance.ToString("N2") $</MudText>
                            @if (_userData?.FreezeDay != null)
                            {
                                <MudText Style="color:gray; font-size:12px; padding:3px;">@localize["until"] @_userData.FreezeDay?.ToString("d")</MudText>
                            }

                        </MudStack>
                        
                    </MudNavLink>                   
                </MudStack>

                <MudNavLink Match="NavLinkMatch.All" Icon="@_darkModeIcon" IconColor="Color.Surface" OnClick="@((e)=>ThemeToggle())">@_userData?.Theme.ToString()</MudNavLink>
                <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Language" OnClick="LanguageToggle" IconColor="Color.Surface">@_userData?.Language</MudNavLink>

                <MudDivider Style="flex-grow: initial;" Class="my-2" />
                <NavMenu NewTransactionCount="_newTransactionCount" />
            </MudDrawer>

            <MudDrawer @bind-Open="_drawerOpen" Class="left-menu" ClipMode="DrawerClipMode.Always" Color="Color.Dark" Elevation="1">
                <NavMenu NewTransactionCount="_newTransactionCount" />
            </MudDrawer>
            <MudMainContent Class="content">
                @Body
            </MudMainContent>
        </MudLayout>
    </Authorized>
    <NotAuthorized>
        <MudLayout>


            @Body

        </MudLayout>
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    bool _drawerOpen = true;

    private bool _open = false;
    private bool _dark = false;
    private string _darkModeIcon = Icons.Material.Outlined.DarkMode;
    private UserData? _userData { get; set; }
    private int _newTransactionCount { get; set; }
    private Color _freezeDayColor { get; set; } = Color.Success;
    private AuthenticationState? AuthState { get; set; }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    protected override async Task OnInitializedAsync()
    {

        if (HttpContext != null)
        {
            if (!CheckSecurity(_cache, HttpContext, _context))
            {
                if (HttpContext.Request.Path.ToString().Contains("AccessDenied"))
                {
                    return;
                }
                _navigationManager.NavigateTo("AccessDenied?message=Too%20Many%20Requests");
            }

            if (HttpContext.Request.Path.ToString().Contains("LoginAsUser"))
            {
                return;
            }
        }

        //transactions cache
        if (!_cache.TryGetValue("NewTransactionCount", out int Count))
        {
            _newTransactionCount = _context.Transactions.Where(x => x.Status == TransactionStatus.Await).Count();
            _cache.Set("NewTransactionCount", _newTransactionCount, new MemoryCacheEntryOptions().SetAbsoluteExpiration(TimeSpan.FromSeconds(60)));
            StateHasChanged();
        }
        else
        {
            _newTransactionCount = Count;
        }

        //user Data
        AuthState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        if (AuthState.User.Identity.IsAuthenticated)
        {

            var userName = AuthState.User.Identity.Name;
            if (!_cache.TryGetValue("UserName" + userName, out UserData data))
            {
                var user = await _userRepository.GetByNameAsync(AuthState.User.Identity.Name, true, false, false);
                if (user == null)
                {
                    return;
                }

                var ownProjects = await _projectRepositoty.GetByOwnerId(new Guid(user.Id));
                var FreezeDay = await _payments.GetFreezeDay(ownProjects, user.Balance.WalletBalance);

                _userData = new UserData
                    {
                        UserId = user.Id,
                        Avatar = user.Avatar,
                        Balance = user.Balance.WalletBalance,
                        Language = user.Language,
                        Theme = user.Theme,
                        UserName = user.UserName,
                        FreezeDay = FreezeDay
                    };

                switch (_userData.Theme)
                {
                    case UserTheme.Dark:
                        _dark = true;
                        break;
                    case UserTheme.Light:
                        _dark = false;
                        break;
                    default:
                        _dark = false;
                        break;
                }


                _cache.Set("UserName" + AuthState.User.Identity.Name, _userData, new MemoryCacheEntryOptions().SetAbsoluteExpiration(TimeSpan.FromSeconds(30)));
            }
            else
            {
                _userData = data;

                switch (_userData.Theme)
                {
                    case UserTheme.Dark:
                        _dark = true;
                        break;
                    case UserTheme.Light:
                        _dark = false;
                        break;
                    default:
                        _dark = false;
                        break;
                }
            }

            if (CultureInfo.CurrentCulture.Name != _userData?.Language)
            {
                if (_userData != null)
                {
                    //UserData_.Language = "ru";
                    var code = Helper.GetLanguageCode(_userData?.Language);
                    switch (code)
                    {
                        case "ru":
                            _userData.Language = Settings.SupportedCultures[0].Name;
                            CultureInfo.CurrentCulture = Settings.SupportedCultures[0];
                            CultureInfo.CurrentUICulture = Settings.SupportedCultures[0];
                            break;
                        case "en":
                            _userData.Language = Settings.SupportedCultures[1].Name;
                            CultureInfo.CurrentCulture = Settings.SupportedCultures[1];
                            CultureInfo.CurrentUICulture = Settings.SupportedCultures[1];
                            break;
                        default:
                            _userData.Language = Settings.SupportedCultures[0].Name;
                            CultureInfo.CurrentCulture = Settings.SupportedCultures[0];
                            CultureInfo.CurrentUICulture = Settings.SupportedCultures[0];
                            break;
                    }



                    HttpContext?.Response.Cookies.Append(
                        CookieRequestCultureProvider.DefaultCookieName,
                        CookieRequestCultureProvider.MakeCookieValue(
                            new RequestCulture(
                                CultureInfo.CurrentCulture,
                                CultureInfo.CurrentUICulture)));

                    if (AuthState.User.Identity.IsAuthenticated)
                    {
                        var AppUser = _context.Users.Where(x => x.UserName == AuthState.User.Identity.Name).FirstOrDefault();
                        AppUser.Language = CultureInfo.CurrentCulture.Name;
                        _context.Update(AppUser);
                        _context.SaveChanges();
                    }
                    _navigationManager.Refresh();
                }

            }
            //-----------------------------------------------------
            if (_userData?.FreezeDay != null)
            {

                if (((DateTime)_userData.FreezeDay - DateTime.UtcNow).TotalDays < 5)
                {
                    _freezeDayColor = Color.Warning;
                }
                if (((DateTime)_userData.FreezeDay - DateTime.UtcNow).TotalDays < 2)
                {
                    _freezeDayColor = Color.Error;
                }
            }


        }

    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void MenuToggle()
    {
        //_drawerOpen = !_drawerOpen;
        _open = !_open;
    }


    async void LanguageToggle()
    {
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };

        var parameters = new DialogParameters<LanguageSelectDialog>();

        //var usersForSendMessage = await FilterApply(false);

        //parameters.Add(x => x.TelegramUsers, usersForSendMessage);

        var dialog = await _dialogService.ShowAsync<LanguageSelectDialog>("Мессенджер", parameters, options);
        var dialogResult = await dialog.Result;
        if (!dialogResult.Canceled)
        {
            var data = (string)dialogResult.Data;
            _userData.Language = data;
            _cache.Set("UserName" + _userData.UserName, _userData, new MemoryCacheEntryOptions().SetAbsoluteExpiration(TimeSpan.FromSeconds(30)));
            _navigationManager.Refresh(true);
        }
    }

    async void ThemeToggle()
    {
        //_drawerOpen = !_drawerOpen;
        _dark = !_dark;

        if (_dark)
        {

            _userData.Theme = UserTheme.Dark;
            await _userRepository.UpdateThemeAsync(_userData.UserId, _userData.Theme);
            _darkModeIcon = Icons.Material.Filled.DarkMode;
        }
        else
        {

            _userData.Theme = UserTheme.Light;
            await _userRepository.UpdateThemeAsync(_userData.UserId, _userData.Theme);
            _darkModeIcon = Icons.Material.Outlined.DarkMode;
        }
    }


    bool CheckSecurity(IMemoryCache cache, HttpContext httpContext, ApplicationDbContext _context)
    {
        int expirationOffset = 1;
        int blockOffset = 60;
        var clientIp = httpContext.Connection.RemoteIpAddress?.ToString();



        if (clientIp != null)
        {
            if (cache.TryGetValue(clientIp + "Blocked", out string? IPBlocked))
            {
                return false;
            }


            if (cache.TryGetValue(clientIp, out IPCounter? IPCount))
            {
                // if (IPCount != null)
                {
                    if (DateTimeOffset.UtcNow > IPCount.Expiration)
                    {
                        IPCount.Expiration = DateTimeOffset.UtcNow.AddSeconds(expirationOffset);
                        IPCount.Count = 0;
                    }
                    IPCount.Count++;
                    cache.Set(clientIp, IPCount, new MemoryCacheEntryOptions().SetAbsoluteExpiration(TimeSpan.FromSeconds(120)));

                    if (IPCount.Count > 5)
                    {
                        cache.Set(clientIp + "Blocked", clientIp, DateTimeOffset.UtcNow.AddSeconds(blockOffset));
                        _logger.LogError(clientIp + " адрес заблокирован на " + blockOffset + " секунд");
                        return false;

                    }
                }


            }
            else
            {
                cache.Set(clientIp, new IPCounter { IPAddress = clientIp, Expiration = DateTimeOffset.UtcNow.AddSeconds(expirationOffset) },
                    DateTimeOffset.UtcNow.AddSeconds(120));
                return true;
            }
        }


        return true;
    }
}





