@using Blazor.OneClick.Models
@using Blazor.OneClick.Static
@using Microsoft.Extensions.Caching.Memory
@using MudBlazor
@using global::OneClick.Data.Data
@using global::OneClick.Data.Helpers
@using global::OneClick.Domain.Enums.Customer
@using global::OneClick.Domain.Enums.Transaction
@using global::OneClick.UseCases.Intefaces.App
@using global::OneClick.UseCases.Intefaces.User
@inherits LayoutComponentBase
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IUserRepository _userRepository
@inject IMemoryCache _cache
@inject NavigationManager _navigationManager
@inject ApplicationDbContext _context
@inject IAppLogger _logger


<style>
    .mud-main-content {
        padding-top: 0 !important;
    }
</style>

<MudThemeProvider Theme="@CustomTheme.MyTheme" IsDarkMode="_dark" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<AuthorizeView>
    <Authorized>

        <MudLayout>
            <MudAppBar Fixed="false" Elevation="0" Color="Color.Tertiary">

                <div class="">
                    <MudStack Row>
                        <MudImage Width="40" Src="img/logo-200.png"></MudImage>
                        <MudText Typo="Typo.h5" Class="ml-3 d-none d-md-block">CopyTrader</MudText>
                    </MudStack>
                </div>

                <MudSpacer />
                <MudIconButton Icon="@_darkModeIcon" Color="Color.Inherit" Edge="Edge.End" OnClick="@((e) => ThemeToggle())" />
                <MudIconButton Icon="@Icons.Material.Filled.Language" Color="Color.Inherit" Edge="Edge.End" />
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Class=" d-md-none" Color="Color.Inherit" Edge="Edge.End" OnClick="@((e) => MenuToggle())" />

            </MudAppBar>


            <MudPaper Elevation="1" Height="50px" Class="d-none d-md-block px-4 py-2">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Class="pa-1" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" />
            </MudPaper>


            <MudDrawer @bind-Open="@_open" OverlayAutoClose="true" Class="d-md-none" Height="100%" Color="Color.Tertiary" Variant="@DrawerVariant.Temporary" Anchor="Anchor.Top">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="px-4">
                    <MudImage Width="30" Height="30" Src="img/logo-200.png"></MudImage>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Inherit" Edge="Edge.End" OnClick="@((e) => MenuToggle())" />
                </MudStack>

                <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Dashboard" IconColor="Color.Surface">Dashboard</MudNavLink>
                <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.LocalLibrary" IconColor="Color.Surface">Library</MudNavLink>
                <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.People" IconColor="Color.Inherit">Community</MudNavLink>
            </MudDrawer>

            <MudDrawer @bind-Open="_drawerOpen" Class="left-menu" ClipMode="DrawerClipMode.Always" Color="Color.Secondary" Elevation="1">
                <NavMenu  NewTransactionCount="_newTransactionCount"/>
            </MudDrawer>
            <MudMainContent Class="content">
                @Body
            </MudMainContent>
        </MudLayout>
    </Authorized>
    <NotAuthorized>
        <MudLayout>


            @Body

        </MudLayout>
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    bool _drawerOpen = true;

    private bool _open = false;
    private bool _dark = false;
    private string _darkModeIcon = Icons.Material.Outlined.DarkMode;
    private UserData? _userData { get; set; }
    private int _newTransactionCount { get; set; }

    private AuthenticationState? AuthState { get; set; }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    protected override async Task OnInitializedAsync()
    {

        if (HttpContext != null)
        {
            if (!CheckSecurity(_cache, HttpContext, _context))
            {
                if (HttpContext.Request.Path.ToString().Contains("AccessDenied"))
                {
                    return;
                }
                _navigationManager.NavigateTo("AccessDenied?message=Too%20Many%20Requests");
            }

            if (HttpContext.Request.Path.ToString().Contains("LoginAsUser"))
            {
                return;
            }
        }

        //transactions cache
        if (!_cache.TryGetValue("NewTransactionCount", out int Count))
        {
            _newTransactionCount = _context.Transactions.Where(x => x.Status == TransactionStatus.Await).Count();
            _cache.Set("NewTransactionCount", _newTransactionCount, new MemoryCacheEntryOptions().SetAbsoluteExpiration(TimeSpan.FromSeconds(60)));
            StateHasChanged();
        }
        else
        {
            _newTransactionCount = Count;
        }

        //user Data
        AuthState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        if (AuthState.User.Identity.IsAuthenticated)
        {
           
            var userName = AuthState.User.Identity.Name;
            if (!_cache.TryGetValue("UserName" + userName, out UserData data))
            {
                var user = await _userRepository.GetByNameAsync(AuthState.User.Identity.Name, true, false, false);
                if (user == null)
                {
                    return;
                }
                _userData = new UserData
                    {
                        UserId = user.Id,
                        Avatar = user.Avatar,
                        Balance = user.Balance.WalletBalance,
                        Language = user.Language,
                        Theme = user.Theme,
                        UserName = user.UserName
                    };

                switch (_userData.Theme)
                {
                    case UserTheme.Dark:
                        _dark = true;
                        break;
                    case UserTheme.Light:
                        _dark = false;
                        break;
                    default:
                        _dark = false;
                        break;
                }


                _cache.Set("UserName" + AuthState.User.Identity.Name, _userData, new MemoryCacheEntryOptions().SetAbsoluteExpiration(TimeSpan.FromSeconds(30)));
            }
            else
            {
                _userData = data;

                switch (_userData.Theme)
                {
                    case UserTheme.Dark:
                        _dark = true;
                        break;
                    case UserTheme.Light:
                        _dark = false;
                        break;
                    default:
                        _dark = false;
                        break;
                }
            }



          
        }

    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void MenuToggle()
    {
        //_drawerOpen = !_drawerOpen;
        _open = !_open;
    }


    async void ThemeToggle()
    {
        //_drawerOpen = !_drawerOpen;
        _dark = !_dark;

        if (_dark)
        {

            _userData.Theme = UserTheme.Dark;
            await _userRepository.UpdateThemeAsync(_userData.UserId, _userData.Theme);
            _darkModeIcon = Icons.Material.Filled.DarkMode;
        }
        else
        {

            _userData.Theme = UserTheme.Light;
            await _userRepository.UpdateThemeAsync(_userData.UserId, _userData.Theme);
            _darkModeIcon = Icons.Material.Outlined.DarkMode;
        }
    }


     bool CheckSecurity(IMemoryCache cache, HttpContext httpContext, ApplicationDbContext _context)
    {
        int expirationOffset = 1;
        int blockOffset = 60;
        var clientIp = httpContext.Connection.RemoteIpAddress?.ToString();



        if (clientIp != null)
        {
            if (cache.TryGetValue(clientIp + "Blocked", out string? IPBlocked))
            {
                return false;
            }


            if (cache.TryGetValue(clientIp, out IPCounter? IPCount))
            {
                // if (IPCount != null)
                {
                    if (DateTimeOffset.UtcNow > IPCount.Expiration)
                    {
                        IPCount.Expiration = DateTimeOffset.UtcNow.AddSeconds(expirationOffset);
                        IPCount.Count = 0;
                    }
                    IPCount.Count++;
                    cache.Set(clientIp, IPCount, new MemoryCacheEntryOptions().SetAbsoluteExpiration(TimeSpan.FromSeconds(120)));

                    if (IPCount.Count > 5)
                    {
                        cache.Set(clientIp + "Blocked", clientIp, DateTimeOffset.UtcNow.AddSeconds(blockOffset));
                        _logger.LogError(clientIp + " адрес заблокирован на " + blockOffset + " секунд");
                        return false;

                    }
                }


            }
            else
            {
                cache.Set(clientIp, new IPCounter { IPAddress = clientIp, Expiration = DateTimeOffset.UtcNow.AddSeconds(expirationOffset) },
                    DateTimeOffset.UtcNow.AddSeconds(120));
                return true;
            }
        }


        return true;
    }
}










@*
<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
 *@