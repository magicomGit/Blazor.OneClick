@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Blazor.OneClick.Constants
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@using Microsoft.Extensions.Localization
@using MudBlazor
@using System.Text.RegularExpressions
@using global::OneClick.Data.Data


@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IStringLocalizer<Login> localize;
@inject ApplicationDbContext _context

<PageTitle>Log in</PageTitle>



<MudPaper Height="100vh" Class="d-flex flex-wrap justify-center align-content-center pa-4">
    <MudPaper Outlined Class="pa-4" Width="100%" MaxWidth="500px">



        <StatusMessage  Message="@errorMessage" />
        <div class="d-flex flex-wrap justify-content-center my-4">
        <MudImage Style="margin-left:auto; margin-right:auto" Width="90" Src="@SystemLogo.Content" />

        </div>

        <MudText Align="Align.Center" Typo="Typo.h3">@localize["Login"]</MudText>
        <MudText Align="Align.Center" Typo="Typo.body1" Class="mb-8">@localize["NeedAuth"]</MudText>

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            



            <MudTextField Label="Email" HelperText="Max. 8 characters" name="Input.Email"
                          Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AccountCircle" @bind-Value="Input.Email" For="@(() => Input.Email)" />
            <MudTextField Label="Password" HelperText="Max. 8 characters" name="Input.Password" InputType="InputType.Password"
                          Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Lock" @bind-Value="Input.Password" For="@(() => Input.Password)" />


           
            
                <MudButton FullWidth Class="btn-cust w-100" Size="Size.Large" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info">@localize["LoginButton"]</MudButton>

            
            <div style="text-align:center" class=" my-3">
                <p>
                    <div>
                        @localize["RegisterLable"]
                        <MudLink Color="Color.Info" Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">@localize["RegisterLink"]</MudLink>
                    </div>
                    <div>
                        @localize["ForgotLable"]
                        <MudLink Color="Color.Info" Href="Account/ForgotPasswordTelegram">@localize["ForgotLink"]</MudLink>
                    </div>
                </p>

            </div>
        </EditForm> 
    </MudPaper>
    
        </MudPaper>



@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }


    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;


    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var user = _context.Users.Where(x => x.UserName == Input.Email).FirstOrDefault();
        if (user != null)
        {
            if (user.Status == UserStatus.Frozen)
            {
                errorMessage = "Error: Аккаунт заморожен. Обратитесь к администрации сайта";
                return;
            }
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
            return;
        }

        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: true);
        if (result.Succeeded)
        {
            user.LastActivity = DateTime.UtcNow;
            _context.SaveChanges();
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }



    private sealed class InputModel
    {
        [Required]
        [RegularExpression(@"^[a-zA-Z]{1}[a-zA-Z0-9]{4,50}$",
         ErrorMessage = "Логин должен содержать не менее 5 символов, только латиницу и цифры")]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; } = true;
    }
}
