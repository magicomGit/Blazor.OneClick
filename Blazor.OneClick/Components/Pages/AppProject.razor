@page "/Projects/{id:int}"
@using Blazor.OneClick.Components.Pages.Shared.SVG
@using Blazor.OneClick.Helpers
@using CloudFlare.Client.Enumerators
@using Microsoft.Extensions.Localization
@using global::OneClick.Data.Data
@using global::OneClick.Domain.Domain.OneClickProjects
@using global::OneClick.UseCases.Intefaces.App
@using global::OneClick.UseCases.Intefaces.OneClickProjects

@inject IStringLocalizer<AppProject> localize
@inject IOneClickProjectRepositoty _projectRepository
@inject IAppSettingsRepository _settingsRepository
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IAppLogger _logger;

<PageTitle>@localize["Project"] | CopyTrader</PageTitle>

<MudPaper MinHeight="400px" MaxWidth="1300px" Outlined Class="cust-block ma-2 ma-md-4">
    @if (_isLoading)
    {
        <div style="min-height: 400px">
            <MudStack Row Wrap="Wrap.Wrap" AlignItems="AlignItems.Center" Class="my-3">
                <MudSkeleton Class="col-lg-3 d-none d-lg-block" SkeletonType="SkeletonType.Circle" Width="80px" Height="80px" />
                <MudSkeleton Class="col-lg-9 col-12" Height="80px" />
            </MudStack>
            <MudDivider />
            <MudSkeleton Height="70px" Class="my-3" />
            <MudDivider />
            <MudStack Row Wrap="Wrap.Wrap" Justify="Justify.SpaceBetween">
                <MudSkeleton Class="col-md-3 col-12" Height="280px" />
                <MudSkeleton Class="col-md-3 col-12" Height="280px" />
                <MudSkeleton Class="col-md-3 col-12" Height="280px" />
                <MudDivider />
            </MudStack>
            <MudStack Spacing="3" Row Class="my-3">
                <BinanceLogo />
                <BitgetLogo />
                <BybitLogo />
                <KucoinLogo />
                <OkxLogo />
            </MudStack>
        </div>
    }
    else
    {
        @if (_project == null)
        {
            <h3>@localize["ProjectNotFound"]</h3>
        }
        else
        {
            <MudStack Row Spacing="2" Wrap="Wrap.Wrap" Justify="Justify.SpaceBetween">

                <MudStack Row>
                    <div class="d-none d-lg-block ps-2" style="min-width: 100px">
                        <img class="p-0" style="width: 80px; height:80px" src="@_project.Logo" />
                    </div>

                    <div>
                        <MudText Class="secondary-light">@localize["Project"]</MudText>
                        <MudText Typo="Typo.h5">@_project.ProjectName</MudText>
                    </div>
                </MudStack>

                <div>

                    <MudText Class="secondary-light">@localize["Tariff"]</MudText>
                    @if (_isAdmin)
                    {
                        <MudLink Color="Color.Primary" Typo="Typo.h5" OnClick="@(ShowTariffDialog)">@localize[_project.Tariff.ToString()]</MudLink>
                    }
                    else
                    {
                        <MudText Typo="Typo.h5">@localize[_project.Tariff.ToString()]</MudText>
                    }


                </div>

                <div>
                    <MudText Class="secondary-light">@localize["DailyFee"]</MudText>
                    <MudText Typo="Typo.h5">@(_project.DayFee.ToString("N2")) $</MudText>
                </div>


                <MudStack Wrap="Wrap.Wrap" Spacing="0" Class="mt-3 mt-md-0">
                    <MudLink Color="Color.Primary" Class="" Typo="Typo.h5" Href="@("http://" + _project.ProjectDomain)" Target="_blank">@_project.ProjectDomain</MudLink>

                    @foreach (var zone in AdditionalDamains)
                    {
                        <MudStack Spacing="1" Row="true" Justify="Justify.FlexEnd" AlignItems="AlignItems.End">
                            @if (zone.Status == ZoneStatus.Active)
                            {
                                <MudLink Color="Color.Info" OnClick="@(()=>ShowDomainModal(zone))">@zone.Name</MudLink>
                            }
                            else if (zone.Status == ZoneStatus.Deleted)
                            {
                                <MudText Color="Color.Error" @onclick="@(()=>ShowDomainModal(zone))">@localize["DomainNotFound"]</MudText>
                            }
                            else
                            {
                                <MudLink Color="Color.Warning" OnClick="@(()=>ShowDomainModal(zone))">@zone.Name</MudLink>
                            }

                            <MudIconButton OnClick="@(()=>DeleteDomainDialog(zone.Name))" Icon="@Icons.Material.Filled.Close" Style="width: 14px; height:14px" Color="Color.Error" Class="p-0 ms-1 me-5 my-auto"></MudIconButton>
                        </MudStack>

                    }
                    <MudStack Spacing="1" Row="true" Justify="Justify.FlexEnd" AlignItems="AlignItems.End">
                        <MudIconButton OnClick="@AddDomainDialog" Icon="@Icons.Material.Filled.Add" Style="width: 14px; height:14px" Color="Color.Primary" Class=" my-auto"></MudIconButton>
                        <MudLink Color="Color.Primary" OnClick="@AddDomainDialog">@localize["AddDomain"]</MudLink>
                    </MudStack>

                </MudStack>

            </MudStack>

            <MudStack Row Wrap="Wrap.Wrap" Justify="Justify.SpaceBetween" Class="my-3 rounded-lg  bg-dark pa-4 mud-elevation-2">
                <div>
                    <MudText Inline Class="secondary-light">@localize["Status"]: </MudText>
                    <MudText Inline Color="Color.Success" Style=" font-weight: bold">@localize[_project.State.ToString()]</MudText>
                </div>

                <div>
                    <MudText Inline Class="secondary-light">@localize["Ping"]: </MudText>
                    <MudText Inline Color="Color.Error" Style=" font-weight: bold">@Helper.TimeToCountdown(_project.LastPing)</MudText>
                </div>

                <div class="d-none d-md-block">

                    <MudText Inline Class="secondary-light">@localize["MaxTraders"]: </MudText>
                    <MudText Inline>@(_project.TraderMaxCount)</MudText>

                </div>
                <div class="d-none d-md-block">
                    
                        <MudText Inline Class="secondary-light">@localize["MaxInvestors"]: </MudText>
                    <MudText Inline>@(_project.UserMaxCount)</MudText>
                    
                </div>

            </MudStack>
           
        }
    }
</MudPaper>

@code {
    [Parameter]
    [SupplyParameterFromQuery] public int? id { get; set; }

    private bool _isLoading { get; set; } = true;
    private bool _isAdmin { get; set; } = true;

    private string _projectStateColor = "Red";
    private string _projectPingColor = "Red";

    private CopyTradingProject? _project { get; set; }
    private List<ProjectDomain>? AdditionalDamains { get; set; } = new List<ProjectDomain>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        _isAdmin = Helper.CheckIsAdmin(authState);

        _project = await _projectRepository.GetById(id ?? 0, true, false);
        _isLoading = false;
        StateHasChanged();
    }

    private void ShowTariffDialog()
    {

    }

    private void ShowDomainModal(ProjectDomain zone)
    {

    }

    private void DeleteDomainDialog(string zone)
    {

    }
    private void AddDomainDialog()
    {

    }
}
