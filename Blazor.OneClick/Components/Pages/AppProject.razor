@page "/Projects/{id:int}"
@using Blazor.OneClick.Components.Pages.Shared.AppProject
@using Blazor.OneClick.Components.Pages.Shared.SVG
@using Blazor.OneClick.Helpers
@using CloudFlare.Client.Enumerators
@using Microsoft.Extensions.Localization
@using global::OneClick.Data.Data
@using global::OneClick.Domain.Domain.OneClickProjects
@using global::OneClick.UseCases.Intefaces.App
@using global::OneClick.UseCases.Intefaces.OneClickProjects

@inject IStringLocalizer<Projects> localize
@inject IOneClickProjectRepositoty _projectRepository
@inject IAppSettingsRepository _settingsRepository
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IAppLogger _logger;

<PageTitle>@localize["Project"] | CopyTrader</PageTitle>

<MudPaper MinHeight="400px" MaxWidth="1300px" Outlined Class="cust-block ma-2 ma-md-4">
    @if (_isLoading)
    {
        <div style="min-height: 400px">
            <MudStack Row Wrap="Wrap.Wrap" AlignItems="AlignItems.Center" Class="my-3">
                <MudSkeleton Class="col-lg-3 d-none d-lg-block" SkeletonType="SkeletonType.Circle" Width="80px" Height="80px" />
                <MudSkeleton Class="col-lg-9 col-12" Height="80px" />
            </MudStack>
            <MudDivider />
            <MudSkeleton Height="70px" Class="my-3" />
            <MudDivider />
            <MudStack Row Wrap="Wrap.Wrap" Justify="Justify.SpaceBetween">
                <MudSkeleton Class="col-md-3 col-12" Height="280px" />
                <MudSkeleton Class="col-md-3 col-12" Height="280px" />
                <MudSkeleton Class="col-md-3 col-12" Height="280px" />
                <MudDivider />
            </MudStack>
            <MudStack Spacing="3" Row Class="my-3">
                <BinanceLogo />
                <BitgetLogo />
                <BybitLogo />
                <KucoinLogo />
                <OkxLogo />
            </MudStack>
        </div>
    }
    else
    {
        @if (_project == null)
        {
            <h3>@localize["ProjectNotFound"]</h3>
        }
        else
        {
            <ProjectHead isAdmin=_isAdmin localize="localize" project="_project" />
            <MudStack Row Justify="Justify.SpaceBetween" Class="mt-5">
                <div>
                    <MudText Typo="Typo.h5" Class="mb-3">@localize["Users"]</MudText>
                    <MudStack Row Wrap="Wrap.Wrap">
                        <div class="ma-2">
                            <MudText Typo="Typo.h5" Inline Class="secondary-light">@localize["TraderCount"]: </MudText>
                            <MudText Typo="Typo.h5" Inline Style=" font-weight: bold">@_project.TraderCount</MudText>
                        </div>
                        <div class="ma-2">
                            <MudText Typo="Typo.h5" Inline Class="secondary-light">@localize["InvestorsCount"]: </MudText>
                            <MudText Typo="Typo.h5" Inline Style=" font-weight: bold">@_project.UserCount</MudText>
                        </div>
                    </MudStack>

                </div>

                <div>
                    <MudText Typo="Typo.h5" Class="mb-3">@localize["Exchanges"]</MudText>
                    <MudStack Row="false" Wrap="Wrap.Wrap">
                        @foreach (ExchangeMarket exchange in Enum.GetValues(typeof(ExchangeMarket)))
                        {
                             
                            if (exchange == ExchangeMarket.None)
                            {
                                continue;
                            }

                            <MudCheckBox T="bool" Value="@(_project.Exchanges.Contains(exchange))" Class="my-1" Dense Label="@exchange.ToString()" Size="Size.Small"></MudCheckBox>
                        }

                    </MudStack>

                </div>

            </MudStack>


        }
    }
</MudPaper>

@code {
    [Parameter]
    [SupplyParameterFromQuery] public int? id { get; set; }

    private bool _isLoading { get; set; } = true;
    private bool _isAdmin { get; set; } = true;

    private string _projectStateColor = "Red";
    private string _projectPingColor = "Red";

    private CopyTradingProject? _project { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        _isAdmin = Helper.CheckIsAdmin(authState);

        _project = await _projectRepository.GetById(id ?? 0, true, false);
        _isLoading = false;
        StateHasChanged();
    }

    private void ShowTariffDialog()
    {

    }

    private void ShowDomainModal(ProjectDomain zone)
    {

    }

    private void DeleteDomainDialog(string zone)
    {

    }
    private void AddDomainDialog()
    {

    }
}
