@page "/TelegramUsers"

@using Blazor.OneClick.Components.Pages.Shared
@using Blazor.OneClick.Components.Pages.Shared.Modals
@using Blazor.OneClick.Constants
@using Blazor.OneClick.Helpers
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using global::OneClick.Data.Data

@attribute [Authorize(Roles = Settings.AdminRole)]

@inject IJSRuntime JSRuntime;
@inject ApplicationDbContext _context
@inject IDialogService _dialogService

<PageTitle>Пользователи | CopyTrader</PageTitle>


<MudPaper MinHeight="400px" MaxWidth="1300px" Outlined Class="cust-block ma-2 ma-md-4">
    <h3>Пользователи @("(" + UsersCount + ")")</h3>


    @if (_isLoading)
    {
        <MudSkeleton Height="10" />
        <MudSkeleton Animation="Animation.False" Height="70px" />
        <MudSkeleton Animation="Animation.Wave" Height="100px" />
        <MudSkeleton Animation="Animation.False" Height="90px" />
        <MudSkeleton Animation="Animation.Wave" Height="130px" />
        <MudSkeleton Animation="Animation.False" Height="50px" />
        <MudSkeleton Animation="Animation.Wave" Height="100px" />
    }
    else
    {
        <MudStack Row Spacing="8">
            <MudSelect Variant="Variant.Outlined" T="string" Label="Status" ValueChanged="SetStatusFilter">
                <MudSelectItem Value="@("all")">Все</MudSelectItem>
                <MudSelectItem Value="@("registered")">Зарегистрирован</MudSelectItem>
                <MudSelectItem Value="@("guest")">Гости</MudSelectItem>
            </MudSelect>

            <MudSelect Variant="Variant.Outlined" T="string" Label="Language" ValueChanged="SetLanguageFilter">
                <MudSelectItem Value="@("all")">Все</MudSelectItem>
                <MudSelectItem Value="@("ru")">Русский</MudSelectItem>
                <MudSelectItem Value="@("en")">Английский</MudSelectItem>
            </MudSelect>

        </MudStack>






        <MudTable Hover Elevation="2" Items="filteredUsers">
            <HeaderContent>
                <MudTh Style="cursor: pointer" onclick="@(()=>SortBy("name", index:0))">
                    <MudStack Row>
                        <MudText Class="pb-1">Telegram</MudText>
                        <MudIcon Color="@(SortName == "name" ? Color.Surface : Color.Transparent)" Icon="@icons[SortList[0] == false ? 0 : 1]" Size="Size.Small" />
                    </MudStack>


                </MudTh>
                <MudTh>TelegramId</MudTh>
                <MudTh>Login</MudTh>
                <MudTh Style="cursor: pointer" onclick="@(()=>SortBy("language", index:1))">
                    <MudStack Row>
                        <MudText Class="pb-1">Language</MudText>
                        <MudIcon Color="@(SortName == "language" ? Color.Surface : Color.Transparent)" Icon="@icons[SortList[1] == false ? 0 : 1]" Size="Size.Small" />
                    </MudStack>
                </MudTh>
                <MudTh Style="cursor: pointer" onclick="@(()=>SortBy("created", index:2))">
                    <MudStack Row>
                        <MudText Class="pb-1">Created</MudText>
                        <MudIcon Color="@(SortName == "created" ? Color.Surface : Color.Transparent)" Icon="@icons[SortList[2] == false ? 0 : 1]" Size="Size.Small" />
                    </MudStack>
                </MudTh>
                <MudTh Style="cursor: pointer" onclick="@(()=>SortBy("registered", index:3))">
                    <MudStack Row>
                        <MudText Class="pb-1">Registered</MudText>
                        <MudIcon Color="@(SortName == "registered" ? Color.Surface : Color.Transparent)" Icon="@icons[SortList[3] == false ? 0 : 1]" Size="Size.Small" />
                    </MudStack>
                </MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Telegram">
                    <MudStack Row Spacing="2" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
                        <MudLink Underline="Underline.None" Color="Color.Primary" OnClick="(()=>TelegramRequest(context.Name))">@context.Name</MudLink>
                       
                    </MudStack>
                </MudTd>
                <MudTd DataLabel="TelegramId"> @context.TelegramId</MudTd>
                <MudTd DataLabel="Login">
                    <MudLink Class="text-decoration-none fw-bold" Color="Color.Primary" Href="@("users/"+context.OneClickUserId)">@context.OneClickLogin</MudLink>
                </MudTd>
                <MudTd DataLabel="Language"> @context.Language</MudTd>
                <MudTd DataLabel="Created">@_registeredDateFormat(Helper.UtcToLocalTime(context.Registered))</MudTd>
                <MudTd DataLabel="Created">@_registeredDateFormat(Helper.UtcToLocalTime(context.RegisteredInOneClick))</MudTd>
            </RowTemplate>
        </MudTable>



        <MudStack Row Justify="Justify.Center" Class="my-2">
            <MudPagination Variant="Variant.Text" ShowFirstButton="true" ShowLastButton="true" Count="PagesQuantity" SelectedChanged="PageChanged" />
        </MudStack>

        <MudStack Row Spacing="3">
            <MudButton Class="btn-cust" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Success" OnClick="SendMessageModal">Рассылка</MudButton>
            <MudButton Class="btn-cust" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Success" OnClick="CreateUsers">Создать пользователей из OneClick</MudButton>
        </MudStack>

    }
</MudPaper>



@code {
    //private List<TelegramUser>? users = new List<TelegramUser>();
    //private List<TelegramUser> usersUI = new List<TelegramUser>();
    private List<TelegramUser> filteredUsers = new List<TelegramUser>();
    private FilterModel Filter { get; set; } = new();
    private int UsersCount { get; set; }
    private int PagesQuantity { get; set; }
    private int ItemsPerPage { get; set; } = 10;
    private int SelectedPageIndex { get; set; } = 1;
    private string SortName { get; set; } = "name";
    private bool _isLoading { get; set; } = true;
    IQueryable<TelegramUser> UsersRequest { get; set; }
    private string[] icons = { Icons.Material.Filled.ArrowDownward, Icons.Material.Filled.ArrowUpward };

    //private string sortedBy = "name";
    private bool SortDesc = false;
    private bool[] SortList = { false, false, false, false };


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            UsersCount = await _context.TelegramUsers.CountAsync();
            GetPaginationData();

            filteredUsers = await FilterApply();

            _isLoading = false;
            StateHasChanged();
        }
    }


    void GetPaginationData()
    {

        PagesQuantity = UsersCount / ItemsPerPage;
        if (UsersCount - (PagesQuantity * ItemsPerPage) > 0)
        {
            PagesQuantity++;
        }
        if (SelectedPageIndex > PagesQuantity)
        {
            if (PagesQuantity == 0)
            {
                SelectedPageIndex = 1;
            }
            else
            {
                SelectedPageIndex = PagesQuantity;
            }
        }
    }

    private async Task<List<TelegramUser>> GetData(string title, bool sortedDesc, bool usePagination = true)
    {
        var _users = new List<TelegramUser>();
        var skipItems = ItemsPerPage * (SelectedPageIndex - 1);
        var itemsPerPage = ItemsPerPage;
        //pagination disbled
        if (!usePagination)
        {
            skipItems = 0;
            itemsPerPage = UsersCount;
        }

        switch (title)
        {
            case "name":
                if ((bool)sortedDesc)
                {
                    _users = await UsersRequest.OrderByDescending(x => x.Name)
                    .Skip(skipItems).Take(itemsPerPage).ToListAsync();
                }
                else
                {
                    _users = await UsersRequest.OrderBy(x => x.Name)
                    .Skip(skipItems).Take(itemsPerPage).ToListAsync();
                }
                break;


            case "registered":
                if ((bool)sortedDesc)
                {
                    _users = await UsersRequest.OrderByDescending(x => x.RegisteredInOneClick)
                    .Skip(skipItems).Take(itemsPerPage).ToListAsync();
                }
                else
                {
                    _users = await UsersRequest.OrderBy(x => x.RegisteredInOneClick)
                    .Skip(skipItems).Take(itemsPerPage).ToListAsync();
                }
                break;

            case "created":
                if (sortedDesc)
                {
                    _users = await UsersRequest.OrderByDescending(x => x.Registered)
                    .Skip(skipItems).Take(itemsPerPage).ToListAsync();
                }
                else
                {
                    _users = await UsersRequest.OrderBy(x => x.Registered)
                    .Skip(skipItems).Take(itemsPerPage).ToListAsync();
                }
                break;


            case "language":
                if ((bool)sortedDesc)
                {
                    _users = await UsersRequest.OrderByDescending(x => x.Language)
                    .Skip(skipItems).Take(itemsPerPage).ToListAsync();
                }
                else
                {
                    _users = await UsersRequest.OrderBy(x => x.Language)
                    .Skip(skipItems).Take(itemsPerPage).ToListAsync();
                }
                break;

            default:

                _users = await UsersRequest.OrderByDescending(x => x.Registered)
                .Skip(skipItems).Take(itemsPerPage).ToListAsync();



                break;
        }


        //usersUI.Clear();
        // filteredUsers.Clear();
        // foreach (var user in users)
        // {
        //     //var userUI = await UserDto.GetUserIU(_context, UserManager, user);
        //     //usersUI.Add(user);
        //     filteredUsers.Add(user);

        // }

        return _users;
    }

    private async Task PageChanged(int index)
    {
        SelectedPageIndex = index;
        filteredUsers = await FilterApply();
        StateHasChanged();
    }

    private async void SendMessageModal()
    {
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Large };

        var parameters = new DialogParameters<MessageToBotUsers>();

        var usersForSendMessage = await FilterApply(false);

        parameters.Add(x => x.TelegramUsers, usersForSendMessage);

        var dialog = await _dialogService.ShowAsync<MessageToBotUsers>("Мессенджер", parameters, options);
        var dialogResult = await dialog.Result;
        if (!dialogResult.Canceled)
        {


        }
    }


    #region Sort

    async void SortBy(string title, int index)
    {
        SortList[index] = !SortList[index];
        SortName = title;
        SortDesc = SortList[index];
        filteredUsers = await FilterApply();
        StateHasChanged();
    }

    #endregion


    #region Filter
    private async Task SetLanguageFilter(string value)
    {
        switch (value)
        {
            case "all": Filter.Language = "all"; break;
            case "ru": Filter.Language = "ru"; break;
            case "en": Filter.Language = "en"; break;

            default: Filter.Status = "all"; break;
        }

        filteredUsers = await FilterApply();
        StateHasChanged();
    }

    private async Task SetStatusFilter(string value)
    {
        switch (value)
        {
            case "all": Filter.Status = "all"; break;
            case "registered": Filter.Status = "registered"; break;
            case "guest": Filter.Status = "guest"; break;

            default: Filter.Status = "all"; break;
        }


        filteredUsers = await FilterApply();
        StateHasChanged();
    }

    private async Task<List<TelegramUser>> FilterApply(bool usePagination = true)
    {

        UsersRequest = _context.TelegramUsers;
        IQueryable<TelegramUser> UsersCountRequest = _context.TelegramUsers;


        switch (Filter.Language)
        {

            case "ru":
                UsersRequest = UsersRequest.Where(x => x.Language.Contains("ru"));
                UsersCountRequest = UsersCountRequest.Where(x => x.Language.Contains("ru"));
                break;

            case "en":
                UsersRequest = UsersRequest.Where(x => x.Language.Contains("en"));
                UsersCountRequest = UsersCountRequest.Where(x => x.Language.Contains("en"));
                break;

            default: break;
        }



        switch (Filter.Status)
        {

            case "registered":
                UsersRequest = UsersRequest.Where(x => x.RegisteredInOneClick != new DateTime());
                UsersCountRequest = UsersCountRequest.Where(x => x.RegisteredInOneClick != new DateTime());
                break;

            case "guest":
                UsersRequest = UsersRequest.Where(x => x.RegisteredInOneClick == new DateTime());
                UsersCountRequest = UsersCountRequest.Where(x => x.RegisteredInOneClick == new DateTime());
                break;

            default: break;
        }


        UsersCount = await UsersCountRequest.CountAsync();
        GetPaginationData();


        var _filteredUsers = await GetData(SortName, SortDesc, usePagination);
        return _filteredUsers;

    }

    private async void CreateUsers()
    {
        var users = await _context.Users.ToListAsync();
        var telegramUsers = await _context.TelegramUsers.ToListAsync();
        var newTelegramUsers = new List<TelegramUser>();

        foreach (var user in users)
        {
            if (!telegramUsers.Where(x => x.TelegramId == user.TelegramId).Any())
            {
                newTelegramUsers.Add(new TelegramUser
                    {
                        Name = user.Telegram,
                        TelegramId = user.TelegramId,
                        Registered = user.Registered,
                        Language = user.Language,
                        OneClickLogin = user.UserName,
                        OneClickUserId = user.Id,
                        RegisteredInOneClick = user.Registered
                    });
            }

        }
        if (newTelegramUsers.Count > 0)
        {
            await _context.AddRangeAsync(newTelegramUsers);
            await _context.SaveChangesAsync();
        }
    }

    private sealed class FilterModel
    {
        public string? Name { get; set; } = "";
        public string? Language { get; set; } = "all";
        public string? Status { get; set; } = "all";
    }

    #endregion


    private string _registeredDateFormat(DateTime date)
    {
        return date.ToString("d");
    }


    private async Task TelegramRequest(string telegram)
    {
        var url = "https://t.me/" + telegram;
        await JSRuntime.InvokeVoidAsync("open", url, "_blank");
    }

}