@page "/"
@using Blazor.OneClick.Components.Pages.Shared
@using Blazor.OneClick.Helpers
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using MudBlazor

@using global::OneClick.Data.Helpers
@using global::OneClick.Data.Repositoties
@using global::OneClick.Domain.Domain.OneClickProjects
@using global::OneClick.Domain.Domain.OneClickProjects.ValueObjects
@using global::OneClick.UseCases.Intefaces.App
@using global::OneClick.UseCases.Intefaces.OneClickProjects

@attribute [Authorize]

@inject IStringLocalizer<Projects> localize
@inject IOneClickProjectRepositoty projectRepository
@inject IAppSettingsRepository settingsRepository
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>@localize["Projects"] | CopyTrader</PageTitle>

<MudPaper MinHeight="400px" MaxWidth="1300px" Outlined Class="cust-block ma-2 ma-md-4">    
    <MudStack Row="true" Justify="Justify.SpaceBetween" Wrap="Wrap.Wrap" Class="p-2 p-md-0">
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h5">@localize["Projects"]</MudText>
            <MudText Typo="Typo.h5">(@CopyTradeProjects?.Count())</MudText>

        </MudStack>
        <MudButton Href="CreateProject" Class="btn-cust mb-2" Color="Color.Primary" Variant="Variant.Filled">@localize["CreateProject"]</MudButton>
    </MudStack>

    @if (CopyTradeProjects.Count() == 0)
    {
        <div>@localize["ProjectsNotFound"]</div>
    }
    else
    {
        <MudTable Hover Elevation="2" Items="CopyTradeProjects">
            <HeaderContent>

                <MudTh>@localize["Name"]</MudTh>
                @if (IsAdmin)
                {
                    <MudTh>@localize["Server"]</MudTh>
                }
                <MudTh>@localize["Link"]</MudTh>
                <MudTh>@localize["DailyFee"]</MudTh>
                <MudTh>@localize["Traders"]</MudTh>
                <MudTh>@localize["Investors"]</MudTh>
                <MudTh>@localize["Owner"]</MudTh>
                <MudTh>@localize["Created"]</MudTh>
                <MudTh>@localize["Ping"]</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="@localize["Name"]">
                    <MudStack Row Spacing="2" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">

                        <MudAvatar Size="Size.Medium">
                            <MudImage Src="@context.Logo"></MudImage>
                        </MudAvatar>
                        @if (context.State == ProjectState.Ready)
                        {
                            <MudLink Style="font-weight:bold" Underline="Underline.None" Color="Color.Primary" Href="@("Projects/"+context.Id)">@context.ProjectName</MudLink>
                        }
                        else
                        {
                            <MudLink Style="font-weight:bold" Underline="Underline.None" title="@context.State.ToString()" Color="Color.Error" Href="@("AppProject/"+context.Id)">@context.ProjectName</MudLink>
                        }

                    </MudStack>
                </MudTd>

                @if (IsAdmin)
                {
                    <MudTd DataLabel="@localize["Server"]">
                        <MudLink Color="Color.Primary" Href="@("AppServer/"+context.ServerId)" Target="_blank">@context.ServerName</MudLink>
                    </MudTd>

                }

                <MudTd DataLabel="@localize["Link"]">
                    <MudLink Href="@("https://"+context.ProjectDomain)" Target="_blank">
                        <MudIcon title="@("https://"+context.ProjectDomain)" Color="Color.Primary" Icon="@Icons.Material.Filled.Link" Size="Size.Medium"></MudIcon>
                    </MudLink>
                </MudTd>

                <MudTd DataLabel="@localize["DailyFee"]">$ @context.DayFee</MudTd>
                <MudTd DataLabel="@localize["Traders"]">@context.TraderCount</MudTd>
                <MudTd DataLabel="@localize["Investors"]">@context.UserCount</MudTd>

                <MudTd DataLabel="@localize["Owner"]">
                    @if (IsAdmin)
                    {
                        <MudLink Class="text-decoration-none fw-bold" Color="Color.Primary" Href="@("users/"+context.OwnerId)">@context.OwnerName</MudLink>
                    }
                    else
                    {
                        @context.OwnerName
                    }
                </MudTd>

                <MudTd DataLabel="@localize["Created"]">@_registeredDateFormat(Helper.UtcToLocalTime(context.CreateDate))</MudTd>
                <MudTd DataLabel="@localize["Ping"]">@Helper.TimeToCountdown(context.LastPing)</MudTd>

            </RowTemplate>


        </MudTable>
    }


</MudPaper>

@code {
    //List<CopyTradingProject>? CopyTradeProjects { get; set; }
    private IEnumerable<CopyTradingProject> CopyTradeProjects = new List<CopyTradingProject>();
    private bool IsAdmin { get; set; }
    private AuthenticationState? AuthState { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        // var ex = new List<ExchangeMarket>();
        // var lg = new List<Language>();
        // var pay = new ProjectPayment();

        // var botRes = TelegramBot.Create("sdf", "dfghd");

        // var projRes = await projectRepository.Create(new CopyTradingProject(0, new Guid(), "", "", botRes.Value, "", "", "",0,0,0,0,0,0, DateTime.Now, DateTime.Now, ProjectState.Creating, 
        // ex, pay, "", ProjectTariff.Start, "",lg,0,"",0));


        AuthState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        IsAdmin = UserHelper.CheckIsAdmin(AuthState);

        CopyTradeProjects = await projectRepository.Get();
        if (CopyTradeProjects == null)
        {
            return;
        }
        StateHasChanged();

        var servicesPrice = await settingsRepository.GetServicesPrices();


        foreach (var project in CopyTradeProjects)
        {
            var projectDayFee = ProjectHelper.GetProjectPaymentAmount(project, servicesPrice);
            project.DayFee = Math.Round(projectDayFee, 2);

            var logo = await projectRepository.GetProjectLogoMini(project.Id);
            if (logo != string.Empty)
            {
                project.Logo = logo;
            }
        }

        StateHasChanged();
    }


    private string _registeredDateFormat(DateTime date)
    {
        return date.ToString("d");
    }

}


